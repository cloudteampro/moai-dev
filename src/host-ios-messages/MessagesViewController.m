//
//  MessagesViewController.m
//  MessagesExtension
//
//  Created by Vavius on 22/08/16.
//  Copyright Â© 2016 Vavius. All rights reserved.
//

#import "MessagesViewController.h"
#import "MOAIMessagesExtension.h"

@interface MessagesViewController () {
	MOAIMessagesExtension* mMoaiApp;
}
@end


@interface MessagesViewController ()

@end

@implementation MessagesViewController

-( void ) viewDidLoad {
	[ super viewDidLoad ];
	
	mMoaiApp = [[ MOAIMessagesExtension alloc ] init ];
	[ mMoaiApp moaiInit:self.view.bounds ];
	
	NSString* root = [[[ NSBundle mainBundle ] resourcePath ] stringByAppendingPathComponent:@"lua" ];
	[ mMoaiApp setWorkingDirectory:root ];
	[ mMoaiApp run:@"main.lua" ];
}

-( void ) didReceiveMemoryWarning {
	[ super didReceiveMemoryWarning ];
	// Dispose of any resources that can be recreated.
}

#pragma mark - Conversation Handling

-( void ) didBecomeActiveWithConversation: ( MSConversation* ) conversation {
	// Called when the extension is about to move from the inactive to active state.
	// This will happen when the extension is about to present UI.
	
	// Use this method to configure the extension and restore previously stored state.
	[ MOAIMessagesExtension didBecomeActive:self withConversation:conversation ];
	[ self presentViewController:[ mMoaiApp viewController ] animated:NO completion:nil];
}

-( void ) willResignActiveWithConversation: ( MSConversation* ) conversation {
	// Called when the extension is about to move from the active to inactive state.
	// This will happen when the user dissmises the extension, changes to a different
	// conversation or quits Messages.
	
	// Use this method to release shared resources, save user data, invalidate timers,
	// and store enough state information to restore your extension to its current state
	// in case it is terminated later.
	[ MOAIMessagesExtension willResignActive ];
	[ self dismissViewControllerAnimated:NO completion:nil];
}

-( void ) didReceiveMessage: ( MSMessage* ) message conversation: ( MSConversation* ) conversation {
	// Called when a message arrives that was generated by another instance of this
	// extension on a remote device.
	
	// Use this method to trigger UI updates in response to the message.
	[ MOAIMessagesExtension didReceiveMessage:message ];
}

-( void ) didSelectMessage:( MSMessage* ) message conversation:( MSConversation* )conversation {
	[ MOAIMessagesExtension didSelectMessage:message ];
}

-( void ) didStartSendingMessage: ( MSMessage* ) message conversation: ( MSConversation* ) conversation {
	// Called when the user taps the send button.
	[ MOAIMessagesExtension didStartSendingMessage:message ];
}

-( void ) didCancelSendingMessage: ( MSMessage* ) message conversation: ( MSConversation* ) conversation {
	// Called when the user deletes the message without sending it.
	
	// Use this to clean up state related to the deleted message.
	[ MOAIMessagesExtension didCancelSendingMessage:message ];
}

-( void ) willTransitionToPresentationStyle: ( MSMessagesAppPresentationStyle ) presentationStyle {
	// Called before the extension transitions to a new presentation style.
	
	// Use this method to prepare for the change in presentation style.
	[ MOAIMessagesExtension willTransitionToPresentationStyle:presentationStyle ];
	//[ mMoaiApp pause:YES ];
}

-( void ) didTransitionToPresentationStyle: ( MSMessagesAppPresentationStyle ) presentationStyle {
	// Called after the extension transitions to a new presentation style.
	
	// Use this method to finalize any behaviors associated with the change in presentation style.
	[ MOAIMessagesExtension didTransitionToPresentationStyle:presentationStyle ];
	//[ mMoaiApp pause:NO ];
}

@end
