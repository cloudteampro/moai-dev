//
//  MessagesViewController.m
//  MessagesExtension
//
//  Created by Vavius on 22/08/16.
//  Copyright Â© 2016 Vavius. All rights reserved.
//

#import "MessagesViewController.h"

@interface MOAIMessagesView ()
-( void ) onUpdateAnim;
@end


@interface MessagesViewController ()

@end

@implementation MessagesViewController

-( void ) viewDidLoad {
	[ super viewDidLoad ];
	
	// Do any additional setup after loading the view.
	mMoaiView = [[ MOAIMessagesView alloc ] init ];

	mMoaiView.userInteractionEnabled = YES;
	mMoaiView.multipleTouchEnabled = YES;
	mMoaiView.alpha = 1.0f;
	mMoaiView.opaque = YES;
	
	[ mMoaiView moaiInit ];
	
	NSString* root = [[[ NSBundle mainBundle ] resourcePath ] stringByAppendingPathComponent:@"lua" ];
	[ mMoaiView setWorkingDirectory:root ];
	[ mMoaiView run:@"main.lua" ];
	
	self.view = mMoaiView;
}

-( void ) didReceiveMemoryWarning {
	[ super didReceiveMemoryWarning ];
	// Dispose of any resources that can be recreated.
}

#pragma mark - Conversation Handling

-( void ) didBecomeActiveWithConversation: ( MSConversation* ) conversation {
	// Called when the extension is about to move from the inactive to active state.
	// This will happen when the extension is about to present UI.
	
	// Use this method to configure the extension and restore previously stored state.
	[ mMoaiView pause:NO ];
	[ MOAIMessagesView didBecomeActive:self withConversation:conversation ];
}

-( void ) willResignActiveWithConversation: ( MSConversation* ) conversation {
	// Called when the extension is about to move from the active to inactive state.
	// This will happen when the user dissmises the extension, changes to a different
	// conversation or quits Messages.
	
	// Use this method to release shared resources, save user data, invalidate timers,
	// and store enough state information to restore your extension to its current state
	// in case it is terminated later.
	[ mMoaiView pause:YES ];
	[ MOAIMessagesView willResignActive ];
}

-( void ) didReceiveMessage: ( MSMessage* ) message conversation: ( MSConversation* ) conversation {
	// Called when a message arrives that was generated by another instance of this
	// extension on a remote device.
	
	// Use this method to trigger UI updates in response to the message.
	[ MOAIMessagesView didReceiveMessage:message ];
}

-( void ) didSelectMessage:( MSMessage* ) message conversation:( MSConversation* )conversation {
	[ MOAIMessagesView didSelectMessage:message ];
}

-( void ) didStartSendingMessage: ( MSMessage* ) message conversation: ( MSConversation* ) conversation {
	// Called when the user taps the send button.
	[ MOAIMessagesView didStartSendingMessage:message ];
}

-( void ) didCancelSendingMessage: ( MSMessage* ) message conversation: ( MSConversation* ) conversation {
	// Called when the user deletes the message without sending it.
	
	// Use this to clean up state related to the deleted message.
	[ MOAIMessagesView didCancelSendingMessage:message ];
}

-( void ) willTransitionToPresentationStyle: ( MSMessagesAppPresentationStyle ) presentationStyle {
	// Called before the extension transitions to a new presentation style.
	
	// Use this method to prepare for the change in presentation style.
	[ MOAIMessagesView willTransitionToPresentationStyle:presentationStyle ];
	
	// Invoking OpenGL commands while messages view is animating causes huge slow downs and spontaneous hangs.
	// Here we skip one frame so the game can render after viewport changes
	[ mMoaiView pauseRender:YES ];
	if ( presentationStyle == MSMessagesAppPresentationStyleExpanded ) {
		[ mMoaiView scheduleRedrawOnSizeChange ];
	}
}

-( void ) didTransitionToPresentationStyle: ( MSMessagesAppPresentationStyle ) presentationStyle {
	// Called after the extension transitions to a new presentation style.
	
	// Use this method to finalize any behaviors associated with the change in presentation style.
	[ MOAIMessagesView didTransitionToPresentationStyle:presentationStyle ];
	[ mMoaiView pauseRender:NO ];
}

@end
